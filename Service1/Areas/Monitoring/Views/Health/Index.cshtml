@{
    ViewBag.Title = "Health page";
}
<h2>Dependencies health</h2>
<div class="container" id="health">
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/lodash.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js" charset="utf-8"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            var epoh = 0;
            var responseTimeData = [];
            //var responseTimeItem = function(epoh, value)
            //{
            //    this.epoh = epoh;
            //    this.value = value;
            //}


            // Reference the auto-generated proxy for the hub.
            var healthMonitor = $.connection.healthHub;

            healthMonitor.client.report = function (healthSummaryList) {
                //Array of health summary objects
                updateDashboard(healthSummaryList);
            }

            healthMonitor.client.echo = function (message) {
                $("#health").append('<li>' + message + '</li>');
            }

            $.connection.hub.start().done(function () {
            });

            function addNewResponseTime(value) {
                responseTimeData.push(value);
                while(responseTimeData.length > 20)
                {
                    responseTimeData.shift();
                }

                console.log(responseTimeData);
            }

            function updateDashboard(healthSummaryList) {
                epoh++;

                for (var i = 0; i < healthSummaryList.length; i++) {
                    var summary = healthSummaryList[i];
                    addNewResponseTime(summary.LastResponseTime);
                    var template = [
                        '<div id="' + summary.Name + '">',
                        '<h4>' + summary.Name + '</h4>',
                        '<h5>' + summary.Endpoint + '</h5>',
                        '<div id="graph" />',
                        '<div><span>Up time: </span><span>' + summary.PercentUp + ' %</span>',
                        '<div><span>Last response time: </span><span>' + summary.LastResponseTime + ' ms</span>',
                        '<div><span>Min response time: </span><span>' + summary.MinResponseTime + ' ms</span>',
                        '<div><span>Max response time: </span><span>' + summary.MaxResponseTime + ' ms</span>',
                        '<div><span>Avg response time: </span><span>' + summary.AvgResponseTime + ' ms</span>',
                        '</div>'
                    ];

                    var service = $("#health").find("#" + summary.Name)[0];
                    if (service) {
                        service.remove();
                    }
                    
                    $("#health").append(template.join(''));
                    linearGraph(responseTimeData);
                    
                }
            }

            function linearGraph(data) {
                // define dimensions of graph
                var m = [40, 40, 40, 80]; // margins
                var w = 500 - m[1] - m[3]; // width
                var h = 300 - m[0] - m[2]; // height

                var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
                // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
               // var y = d3.scale.linear().domain([0, maxValue]).range([h, 0]);
                // automatically determining max range can work something like this
                var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);

                // create a line function that can convert data[] into x and y points
                var line = d3.svg.line()
                    // assign the X function to plot our line as we wish
                    .x(function (d, i) {
                        // verbose logging to show what's actually being done
                        console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
                        // return the X coordinate where we want to plot this datapoint
                        return x(i);
                    })
                    .y(function (d) {
                        // verbose logging to show what's actually being done
                        console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
                        // return the Y coordinate where we want to plot this datapoint
                        return y(d);
                    })

                // Add an SVG element with the desired dimensions and margin.
                var graph = d3.select("#graph").append("svg:svg")
                      .attr("width", w + m[1] + m[3])
                      .attr("height", h + m[0] + m[2])
                    .append("svg:g")
                      .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

                // create yAxis
                var xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(true);
                // Add the x-axis.
                graph.append("svg:g")
                      .attr("class", "x axis")
                      .attr("transform", "translate(0," + h + ")")
                      .call(xAxis);


                // create left yAxis
                var yAxisLeft = d3.svg.axis().scale(y).ticks(4).orient("left");
                // Add the y-axis to the left
                graph.append("svg:g")
                      .attr("class", "y axis")
                      .attr("transform", "translate(-25,0)")
                      .call(yAxisLeft);

                // Add the line by appending an svg:path element with the data line we created above
                // do this AFTER the axes above so that the line is above the tick-lines
                graph.append("svg:path").attr("d", line(data));
            }
        });
    </script>
}